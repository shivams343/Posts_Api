{"version":3,"sources":["components/Menu.js","components/DataFetchingTwo.js","components/Favourite.js","App.js","serviceWorker.js","index.js"],"names":["SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","initialState","loading","error","posts","reducer","state","action","type","payload","DataFetchingTwo","classes","useReducer","dispatch","useEffect","axios","get","then","response","data","catch","className","App","Container","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","href","maxWidth","map","post","key","style","padding","Card","alignItems","CardContent","gutterBottom","component","size","Favourite","exact","path","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e13246c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nfunction SimpleMenu() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n        <MenuIcon/>\r\n      </Button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n        <MenuItem onClick={handleClose}>My account</MenuItem>\r\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimpleMenu;","import React,{useReducer,useEffect} from 'react'\r\nimport axios from 'axios';\r\nimport {Container,makeStyles,AppBar,Toolbar,IconButton,Card,CardContent,Typography,Grid,Button} from '@material-ui/core';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport App from '../App';\r\nimport SimpleMenu from './Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nconst initialState={\r\n    loading:true,\r\n    error:'',\r\n    posts:{},\r\n}\r\nconst reducer = (state,action)=>{\r\n    \r\n    switch(action.type){\r\n        case 'FETCH_SUCCESS':\r\n            return{\r\n                loading:false,\r\n                posts:action.payload,\r\n                error:\"\"\r\n            }\r\n        case \"FETCH_ERROR\":\r\n            return{\r\n                loading:false,\r\n                posts:{},\r\n                 error:\"Something went wrong\"\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction DataFetchingTwo() {\r\n    const classes = useStyles();\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n   \r\n    useEffect(() => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/posts`)\r\n        .then(response =>{\r\n            dispatch({type:'FETCH_SUCCESS',payload:response.data})\r\n        }).catch(error=>{\r\n            dispatch({type:\"FETCH_ERROR\",payload:{}})\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className={App}>\r\n        <Container className={classes.root}>\r\n            <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n           <SimpleMenu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n          <Button color=\"inherit\" href=\"/\">LIST OF POSTS</Button>\r\n          </Typography>\r\n          <Button color=\"inherit\" onClick={{}}>Login</Button>\r\n          <Button color=\"inherit\" href=\"/favourite\">\r\n              favourite\r\n           </Button>\r\n        </Toolbar>\r\n        </AppBar>\r\n       </Container> \r\n\r\n      <Container maxWidth=\"sm\" >\r\n            {state.loading? 'loading':\r\n            state.posts.map(post => \r\n                <div key={post.id} style={{maxWidth:345, padding:10}} >\r\n                    \r\n                    <Card style={{alignItems:\"center\"}}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {post.title}\r\n                            </Typography>\r\n                            <Button size=\"small\" color=\"primary\">\r\n                            LIKE <FavoriteBorderIcon/>\r\n                            </Button>\r\n                            <Button size=\"small\" color=\"primary\">\r\n                            Share<ShareIcon/>\r\n                            </Button>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            )\r\n            }\r\n            {state.error? 'error':null}\r\n            </Container>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DataFetchingTwo\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Favourite=()=> {\r\n    return (\r\n        <div>\r\n           favourite\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Favourite; ","import React, { useReducer } from 'react';\nimport './App.css';\nimport DataFetchingTwo from './components/DataFetchingTwo';\nimport {Route,Switch} from 'react-router-dom';\nimport Favourite from \"./components/Favourite\";\n\nfunction App(){\n    return (\n          <>\n            <Switch>\n                <Route exact path='/favourite' component={Favourite}/>\n                <Route exact path='/' component={DataFetchingTwo}/>\n            </Switch>\n          </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}